// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: donation.sql

package repository

import (
	"context"
	"database/sql"
)

const countDonations = `-- name: CountDonations :one
SELECT COUNT(*) FROM donations
`

func (q *Queries) CountDonations(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countDonations)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createDonation = `-- name: CreateDonation :one
INSERT INTO donations
(full_name, email, message, status, amount)
VALUES
(?, ?, ?, "pending", ?)
RETURNING id, full_name, email, message, status, amount, created_at, updated_at
`

type CreateDonationParams struct {
	FullName string         `json:"full_name"`
	Email    string         `json:"email"`
	Message  sql.NullString `json:"message"`
	Amount   int64          `json:"amount"`
}

func (q *Queries) CreateDonation(ctx context.Context, arg CreateDonationParams) (Donation, error) {
	row := q.db.QueryRowContext(ctx, createDonation,
		arg.FullName,
		arg.Email,
		arg.Message,
		arg.Amount,
	)
	var i Donation
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Message,
		&i.Status,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDonation = `-- name: DeleteDonation :exec
DELETE FROM donations WHERE id = ?
`

func (q *Queries) DeleteDonation(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteDonation, id)
	return err
}

const getDonationByID = `-- name: GetDonationByID :one
SELECT id, full_name, email, message, status, amount, created_at, updated_at FROM donations WHERE id = ?
`

func (q *Queries) GetDonationByID(ctx context.Context, id int64) (Donation, error) {
	row := q.db.QueryRowContext(ctx, getDonationByID, id)
	var i Donation
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Message,
		&i.Status,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTotalDonationsAmount = `-- name: GetTotalDonationsAmount :one
SELECT SUM(amount) FROM donations WHERE status = 'COMPLETE'
`

func (q *Queries) GetTotalDonationsAmount(ctx context.Context) (sql.NullFloat64, error) {
	row := q.db.QueryRowContext(ctx, getTotalDonationsAmount)
	var sum sql.NullFloat64
	err := row.Scan(&sum)
	return sum, err
}

const listDonations = `-- name: ListDonations :many
SELECT id, full_name, email, message, status, amount, created_at, updated_at FROM donations ORDER BY updated_at DESC LIMIT ? OFFSET ?
`

type ListDonationsParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListDonations(ctx context.Context, arg ListDonationsParams) ([]Donation, error) {
	rows, err := q.db.QueryContext(ctx, listDonations, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Donation
	for rows.Next() {
		var i Donation
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Email,
			&i.Message,
			&i.Status,
			&i.Amount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDonation = `-- name: UpdateDonation :one
UPDATE donations
SET full_name = ?, email = ?, message = ?, status = ?, amount = ?
WHERE id = ?
RETURNING id, full_name, email, message, status, amount, created_at, updated_at
`

type UpdateDonationParams struct {
	FullName string         `json:"full_name"`
	Email    string         `json:"email"`
	Message  sql.NullString `json:"message"`
	Status   string         `json:"status"`
	Amount   int64          `json:"amount"`
	ID       int64          `json:"id"`
}

func (q *Queries) UpdateDonation(ctx context.Context, arg UpdateDonationParams) (Donation, error) {
	row := q.db.QueryRowContext(ctx, updateDonation,
		arg.FullName,
		arg.Email,
		arg.Message,
		arg.Status,
		arg.Amount,
		arg.ID,
	)
	var i Donation
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Message,
		&i.Status,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateStatus = `-- name: UpdateStatus :one
UPDATE donations
SET status = ?
WHERE id = ?
RETURNING id, full_name, email, message, status, amount, created_at, updated_at
`

type UpdateStatusParams struct {
	Status string `json:"status"`
	ID     int64  `json:"id"`
}

func (q *Queries) UpdateStatus(ctx context.Context, arg UpdateStatusParams) (Donation, error) {
	row := q.db.QueryRowContext(ctx, updateStatus, arg.Status, arg.ID)
	var i Donation
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Message,
		&i.Status,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
